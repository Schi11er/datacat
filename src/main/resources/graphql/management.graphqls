enum CatalogRecordType {
    ExternalDocument
    Property
    Subject
    Unit
    Value
    # OrderedValue
    ValueList
    Language
    Dimension
    Rational
    MultiLanguageText
    Text
    Symbol
    Interval
    Dictionary
    QuantityKind
    Country
    Subdivision
}

enum RelationshipRecordType {
    BoundaryValues
    CountryOfOrigin
    Dictionary
    Dimension
    Maximum
    Minimum
    # OrderedValue
    PossibleValues
    Properties
    QuantityKinds
    ReferenceDocuments
    RelationshipToProperty
    RelationshipToSubject
    ReplacedObjects
    ScopeSubjects
    SimilarTo
    Subject
    Subdivisions
    Symbols
    TargetProperties
    TargetSubjects
    Units
    Unit
    Values
    Value
}

union SimpleRecord =
    XtdExternalDocument
    | XtdSubject
    | XtdProperty
    | XtdUnit
    | XtdValue
    | XtdValueList
    # | XtdOrderedValue
    | XtdLanguage
    | XtdDimension
    | XtdRational
    | XtdMultiLanguageText
    | XtdText
    | XtdSymbol
    | XtdInterval
    | XtdDictionary
    | XtdQuantityKind
    | XtdCountry
    | XtdSubdivision
    | XtdRelationshipToSubject
    | XtdRelationshipToProperty
    # | XtdRelationshipType

input UnitInput {
    scale: XtdUnitScaleEnum
    base: XtdUnitBaseEnum
    symbol: [TranslationInput!]
    offset: RationalInput
    coefficient: RationalInput
}

input PropertyInput {
    dataType: XtdDataTypeEnum
    dataFormat: String
}

input ExternalDocumentInput {
    documentUri: String
    author: String
    isbn: String
    publisher: String
    dateOfPublication: String
    languageTag: [ID!]
}

input CountryInput {
    code: String
}

input ValueInput {
    nominalValue: String
}

input OrderedValueInput {
    order: Int
}

input IntervalInput {
    minimumIncluded: Boolean
    maximumIncluded: Boolean
}

input LanguageInput {
    englishName: String
    nativeName: String
    code: String
    comments: [String!]
}

input TextInput {
    text: String
}

input ValueListInput {
    languageTag: ID
}

input SymbolInput {
    symbol: TranslationInput!
}

input RationalInput {
    numerator: Int
    denominator: Int
}

input DimensionInput {
    lengthExponent: RationalInput!
    massExponent: RationalInput!
    timeExponent: RationalInput!
    electricCurrentExponent: RationalInput!
    thermodynamicTemperatureExponent: RationalInput!
    amountOfSubstanceExponent: RationalInput!
    luminousIntensityExponent: RationalInput!
}

input RelationshipToPropertyInput {
    relationshipType: XtdPropertyRelationshipTypeEnum
}

input RelationshipToSubjectInput {
    relationshipType: XtdRelationshipKindEnum
}

input PropertiesInput {
    id: ID
    majorVersion: Int
    minorVersion: Int
    dateOfCreation: String
    status: XtdStatusOfActivationEnum
    names: [TranslationInput!]
    descriptions: [TranslationInput!]
    comments: [TranslationInput!]
    deprecationExplanation: [TranslationInput!]
    definition: [TranslationInput!]
    """ 
    LanguageCode 
    """
    languageOfCreator: ID
    # CountryCode
    CountryOfOrigin: ID
    examples: [TranslationInput!]
    propertyProperties: PropertyInput
    unitProperties: UnitInput
    externalDocumentProperties: ExternalDocumentInput
    countryProperties: CountryInput
    subdivisionProperties: CountryInput
    valueProperties: ValueInput
    orderedValueProperties: OrderedValueInput
    intervalProperties: IntervalInput
    languageProperties: LanguageInput
    textProperties: TextInput
    rationalProperties: RationalInput
    valueListProperties: ValueListInput
    symbolProperties: SymbolInput
    dimensionProperties: DimensionInput
}

input RelationshipPropertiesInput {
    id: ID
    majorVersion: Int
    minorVersion: Int
    status: XtdStatusOfActivationEnum
    names: [TranslationInput!]
    descriptions: [TranslationInput!]
    comments: [TranslationInput!]
    relationshipToPropertyProperties: RelationshipToPropertyInput
    relationshipToSubjectProperties: RelationshipToSubjectInput
    valueListProperties: OrderedValueInput
}

input CreateCatalogEntryInput {
    catalogEntryType: CatalogRecordType!
    properties: PropertiesInput!
    tags: [ID!]
}

input DeleteCatalogEntryInput {
    catalogEntryId: ID!
}

type CreateCatalogEntryPayload {
    catalogEntry: SimpleRecord
}

type DeleteCatalogEntryPayload {
    catalogEntry: SimpleRecord
}

input CreateRelationshipInput {
    relationshipType: RelationshipRecordType!
    properties: RelationshipPropertiesInput
    fromId: ID!
    toIds: [ID!]!
}

type CreateRelationshipPayload {
    catalogEntry: SimpleRecord
}

input DeleteRelationshipInput {
    relationshipType: RelationshipRecordType!
    fromId: ID!
    toId: ID!
}

type DeleteRelationshipPayload {
    catalogEntry: SimpleRecord
}

input TranslationInput {
    id: ID
    languageTag: ID!
    value: String!
}

input TranslationUpdateInput {
    translationId: ID!
    value: String!
}

type TextPayload {
    catalogEntry: SimpleRecord
}

input AddTextInput {
    catalogEntryId: ID!
    text: TranslationInput!
}

input UpdateTextInput {
    textId: ID!
    value: String!
}

input DeleteTextInput {
    textId: ID!
}

input CreateTagInput {
    tagId: ID
    name: String!
}

type CreateTagPayload {
    tag: Tag
}

input UpdateTagInput {
    tagId: ID!
    name: String!
}

type UpdateTagPayload {
    tag: Tag
}

input DeleteTagInput {
    tagId: ID!
}

type DeleteTagPayload {
    tag: Tag
}

input AddTagInput {
    catalogEntryId: ID!
    tagId: ID!
}

type AddTagPayload {
    catalogEntry: SimpleRecord
    tag: Tag
}

input RemoveTagInput {
    catalogEntryId: ID!
    tagId: ID!
}

type RemoveTagPayload {
    catalogEntry: SimpleRecord
    tag: Tag
}

input updateStatusInput {
    catalogEntryId: ID!
    status: XtdStatusOfActivationEnum!
}

type updateStatusPayload {
    catalogEntry: SimpleRecord
}

input updateMajorVersionInput {
    catalogEntryId: ID!
    majorVersion: Int!
}

type updateMajorVersionPayload {
    catalogEntry: SimpleRecord
}

input updateMinorVersionInput {
    catalogEntryId: ID!
    minorVersion: Int!
}

type updateMinorVersionPayload {
    catalogEntry: SimpleRecord
}

input AddCountryOfOriginInput {
    catalogEntryId: ID!
    countryCode: String!
}

input DeleteCountryOfOriginInput {
    catalogEntryId: ID!
}

enum XtdDataTypeEnum {
    XTD_BOOLEAN
    XTD_INTEGER
    XTD_RATIONAL
    XTD_REAL
    XTD_COMPLEX
    XTD_STRING
    XTD_DATETIME
}

enum XtdPropertyRelationshipTypeEnum {
    XTD_DEPENDS
    XTD_SPECIALIZES
}

enum XtdRelationshipKindEnum {
    XTD_INSTANCE_LEVEL
    XTD_SCHEMA_LEVEL
}

enum XtdUnitBaseEnum {
    XTD_ONE
    XTD_TWO
    XTD_E
    XTD_PI
    XTD_TEN
}

enum XtdUnitScaleEnum {
    XTD_LINEAR 
    XTD_LOGARITHMIC
}

enum XtdStatusOfActivationEnum {
    XTD_ACTIVE
    XTD_INACTIVE
}

type Mutation {

    # Creates a new catalog entry of the defined entry type.
    createCatalogEntry(input: CreateCatalogEntryInput!): CreateCatalogEntryPayload

    # Deletes the entry from the catalog.
    deleteCatalogEntry(input: DeleteCatalogEntryInput!): DeleteCatalogEntryPayload

    # Creates a relationship originating from the given catalog entry.
    # The related entries must be added with subsequent requests.
    createRelationship(input: CreateRelationshipInput!): CreateRelationshipPayload

    # Deletes a relationship between catalog entries.
    deleteRelationship(input: DeleteRelationshipInput!): DeleteRelationshipPayload

    # Adds a localized name to the given catalog entry.
    addName(input: AddTextInput!): TextPayload

    # Updates the localized name of the given catalog entry.
    updateName(input: UpdateTextInput!): TextPayload

    # Delete the localized name of the given catalog entry.
    # Throws an error if the entry would end up unnamed.
    deleteName(input: DeleteTextInput!): TextPayload

    # Adds a localized description to the given catalog entry.
    addDescription(input: AddTextInput!): TextPayload

    # Updates a localized description of the given catalog entry.
    updateDescription(input: UpdateTextInput!): TextPayload

    # Deletes a localized description from the catalog entry.
    deleteDescription(input: DeleteTextInput!): TextPayload

    # Adds a localized comment to the given catalog entry.
    addComment(input: AddTextInput!): TextPayload

    # Updates a localized comment of the given catalog entry.
    updateComment(input: UpdateTextInput!): TextPayload

    # Deletes a localized comment from the catalog entry.
    deleteComment(input: DeleteTextInput!): TextPayload

    # Creates a new user defined tag.
    createTag(input: CreateTagInput!): CreateTagPayload

    # Updates an existing user defined tag.
    updateTag(input: UpdateTagInput!): UpdateTagPayload

    # Deletes an existing user defined tag.
    deleteTag(input: DeleteTagInput!): DeleteTagPayload

    # Tags a concept entity with the given user defined tag.
    addTag(input: AddTagInput!): AddTagPayload

    # Removes a tag from an existing user defined tag.
    removeTag(input: RemoveTagInput!): RemoveTagPayload

    # Updates the status of the given catalog entry.
    updateStatus(input: updateStatusInput!): updateStatusPayload

    # Updates the major version of the given catalog entry.
    updateMajorVersion(input: updateMajorVersionInput!): updateMajorVersionPayload

    # Updates the minor version of the given catalog entry.
    updateMinorVersion(input: updateMinorVersionInput!): updateMinorVersionPayload

    # Adds a deprecation explanation to the given catalog entry.
    addDeprecationExplanation(input: AddTextInput!): TextPayload

    # Updates a deprecation explanation of the given catalog entry.
    updateDeprecationExplanation(input: UpdateTextInput!): TextPayload

    # Deletes a deprecation explanation from the catalog entry.
    deleteDeprecationExplanation(input: DeleteTextInput!): TextPayload

    # Adds a definition to the given catalog entry.
    addDefinition(input: AddTextInput!): TextPayload

    # Updates a definition of the given catalog entry.
    updateDefinition(input: UpdateTextInput!): TextPayload

    # Deletes a definition from the catalog entry.
    deleteDefinition(input: DeleteTextInput!): TextPayload

    # Adds an example to the given catalog entry.
    addExample(input: AddTextInput!): TextPayload

    # Updates an example of the given catalog entry.
    updateExample(input: UpdateTextInput!): TextPayload

    # Deletes an example from the catalog entry.
    deleteExample(input: DeleteTextInput!): TextPayload

    # Adds a country of origin to the given catalog entry.
    addCountryOfOrigin(input: AddCountryOfOriginInput!): TextPayload

    # Deletes a country of origin from the catalog entry.
    deleteCountryOfOrigin(input: DeleteCountryOfOriginInput!): TextPayload
}
