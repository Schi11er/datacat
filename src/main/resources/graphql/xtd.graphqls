type CatalogRecordStatistics {
    id: ID!
    count: Int!
}

type CatalogStatistics {
    items: [CatalogRecordStatistics!]!
}

type SearchResult {
    id: ID!
    recordType: CatalogRecordType!
    tags: [Tag!]!
    versionId: String
    versionDate: String
    name(input: LocalizationInput): String
    names: [Translation!]!
    description(input: LocalizationInput): String
    descriptions: [Translation!]!
    comment(input: LocalizationInput): String
    comments: [Translation!]!
}

type SearchResultConnection {
    nodes: [SearchResult!]!
    pageInfo: PageInfo!
    totalElements: Int!
}

input LocaleInput {
    languageTag: ID!
}

type Language {
    id: String!
    languageTag: String!
    displayCountry(input: LocaleInput): String!
    displayLanguage(input: LocaleInput): String!
}

type LocalizedText {
    language: Language!
    text: String!
}

type Tag {
    id: ID!
    name: String!
    created: String!
    createdBy: String!
    lastModified: String!
    lastModifiedBy: String!
}

type TagConnection {
    nodes: [Tag!]!
    pageInfo: PageInfo!
    totalElements: Int!
}

type HierarchyPayload {
    nodes: [XtdRoot!]!
    paths: [[ID!]!]!
}

type findPropGroupWithoutPropPayload {
    nodes: [XtdRoot!]!
    paths: [[ID!]!]!
}

type findPropWithoutSubjectOrPropGroupPayload {
    nodes: [XtdRoot!]!
    paths: [[ID!]!]!
}

type findModelWithoutGroupPayload {
    nodes: [XtdRoot!]!
    paths: [[ID!]!]!
}

type findGroupWithoutSubjectPayload {
    nodes: [XtdRoot!]!
    paths: [[ID!]!]!
}

type findSubjectWithoutPropPayload {
    nodes: [XtdRoot!]!
    paths: [[ID!]!]!
}

type findMeasureWithoutPropPayload {
    nodes: [XtdRoot!]!
    paths: [[ID!]!]!
}

type findUnitWithoutMeasurePayload {
    nodes: [XtdRoot!]!
    paths: [[ID!]!]!
}

type findValueWithoutMeasurePayload {
    nodes: [XtdRoot!]!
    paths: [[ID!]!]!
}

type findMissingTagsPayload {
    nodes: [XtdRoot!]!
    paths: [[ID!]!]!
}

type findMissingEnglishNamePayload {
    nodes: [XtdRoot!]!
    paths: [[ID!]!]!
}

type findMultipleIDsPayload {
    nodes: [XtdRoot!]!
    paths: [[ID!]!]!
}

type findMissingDescriptionPayload {
    nodes: [XtdRoot!]!
    paths: [[ID!]!]!
}

type findMissingEnglishDescriptionPayload {
    nodes: [XtdRoot!]!
    paths: [[ID!]!]!
}

type findMultipleNamesPayload {
    nodes: [XtdRoot!]!
    paths: [[ID!]!]!
}

type findMultipleNamesAcrossClassesPayload {
    nodes: [XtdRoot!]!
    paths: [[ID!]!]!
}

type findExportCatalogRecordsPayload {
    nodes: [ExportResult!]
    paths: [[ID!]!]!
}

type findExportCatalogRecordsRelationshipsPayload {
    nodes: [ExportRelationshipResult!]
    paths: [[ID!]!]!
}

type ExportResult {
    id: ID!
    typ: String
    tags: [String]
    name: String
    name_en: String
    description: String
    versionId: String
    created: String
    createdBy: String
    lastModified: String
    lastModifiedBy: String
}

type ExportRelationshipResult {
    entity1: ID!
    entity1Type: String!
    relationId: ID!
    relationshipType: String!
    entity2: ID!
    entity2Type: String!
}

# Xtd misc

extend type Translation {
    created: String!
    createdBy: String!
    lastModified: String!
    lastModifiedBy: String!
}

# inputs

input CatalogEntryTypeFilterInput {
    in: [CatalogRecordType!]
}

input TagFilterInput {
    in: [ID!]
}

input CatalogEntryFilterInput {
    catalogEntryType: CatalogEntryTypeFilterInput
    tags: TagFilterInput
}

input SearchInput {
    query: String
    filters: [CatalogEntryFilterInput!]
    entityTypeIn: [CatalogRecordType!]
    entityTypeNotIn: [CatalogRecordType!]
    idIn: [ID!]
    idNotIn: [ID!]
    tagged: [ID!]
    pageNumber: Int
    pageSize: Int
}

input HierarchyRootNodeFilterInput {
    catalogEntryTypeIn: [CatalogRecordType!]
    catalogEntryTypeNotIn: [CatalogRecordType!]
    idIn: [ID!]
    idNotIn: [ID!]
    tagged: [ID!]
}

input HierarchyFilterInput {
    rootNodeFilter: HierarchyRootNodeFilterInput!
}


input findMissingTagsNodeTypeFilterInput {catalogEntryTypeIn: [CatalogRecordType!]}

input findMissingTagsFilterInput {nodeTypeFilter: findMissingTagsNodeTypeFilterInput!}


input findMultipleIDsNodeTypeFilterInput {catalogEntryTypeIn: [CatalogRecordType!]}

input findMultipleIDsFilterInput {nodeTypeFilter: findMultipleIDsNodeTypeFilterInput!}


input findMissingDescriptionNodeTypeFilterInput {catalogEntryTypeIn: [CatalogRecordType!]}

input findMissingDescriptionFilterInput {nodeTypeFilter: findMissingDescriptionNodeTypeFilterInput!}


input findMissingEnglishNameNodeTypeFilterInput {catalogEntryTypeIn: [CatalogRecordType!]}

input findMissingEnglishNameFilterInput {nodeTypeFilter: findMissingEnglishNameNodeTypeFilterInput!}


input findMissingEnglishDescriptionNodeTypeFilterInput {catalogEntryTypeIn: [CatalogRecordType!]}

input findMissingEnglishDescriptionFilterInput {nodeTypeFilter: findMissingEnglishDescriptionNodeTypeFilterInput!}


input findMultipleNamesNodeTypeFilterInput {catalogEntryTypeIn: [CatalogRecordType!]}

input findMultipleNamesFilterInput {nodeTypeFilter: findMultipleNamesNodeTypeFilterInput!}

input findMultipleNamesAcrossClassesNodeTypeFilterInput {catalogEntryTypeIn: [CatalogRecordType!]}

input findMultipleNamesAcrossClassesFilterInput {nodeTypeFilter: findMultipleNamesAcrossClassesNodeTypeFilterInput!}


input FilterInput {
    query: String
    idIn: [ID!]
    idNotIn: [ID!]
    tagged: [ID!]
    pageNumber: Int
    pageSize: Int
}

# Query type

input LanguageFilterInput {
    query: String
    excludeLanguageTags: [String!]
}

type LanguageConnection {
    nodes: [Language!]!
    pageInfo: PageInfo!
    totalElements: Int!
}

type Translation {
    id: ID!
    value: String!
    language: Language!
}

input LocalizationInput {
    languageTags: [String!]
}

# interface Concept {
#     id: ID!
#     recordType: CatalogRecordType!
#     created: String!
#     createdBy: String!
#     lastModified: String!
#     lastModifiedBy: String!
#     versionId: String
#     versionDate: String
#     name(input: LocalizationInput): String
#     names: [Translation!]!
#     description(input: LocalizationInput): String
#     descriptions: [Translation!]!
#     comment(input: LocalizationInput): String
#     comments: [Translation!]!
#     tags: [Tag!]!
# }

type XtdExternalDocument implements XtdRoot {
    id: ID!
    recordType: CatalogRecordType!
    created: String!
    createdBy: String!
    lastModified: String!
    lastModifiedBy: String!
    versionId: String
    versionDate: String
    majorVersion: Int!
    minorVersion: Int!
    uri: String!
    author: String!
    isbn: String!
    publisher: String!
    dateOfPublication: String!
    name(input: LocalizationInput): String
    names: [Translation!]!
    description(input: LocalizationInput): String
    descriptions: [Translation!]!
    comment(input: LocalizationInput): String
    comments: [Translation!]!
    tags: [Tag!]!
    documents: [XtdRoot!]
    collectedBy: XtdRelCollectsConnection! # nur vorübergehend hinzugefügt
}

interface XtdRoot {
    id: ID!
    recordType: CatalogRecordType!
    created: String!
    createdBy: String!
    lastModified: String!
    lastModifiedBy: String!
    versionId: String
    versionDate: String
    name(input: LocalizationInput): String
    names: [Translation!]!
    description(input: LocalizationInput): String
    descriptions: [Translation!]!
    comment(input: LocalizationInput): String
    comments: [Translation!]!
    tags: [Tag!]!
    # collectedBy: XtdRelCollectsConnection!  !!! Auskommentiert für Übernahme von Concept
}

interface XtdObject implements XtdRoot {
    id: ID!
    recordType: CatalogRecordType!
    created: String!
    createdBy: String!
    lastModified: String!
    lastModifiedBy: String!
    versionId: String
    versionDate: String
    majorVersion: Int!
    minorVersion: Int!
    name(input: LocalizationInput): String
    names: [Translation!]!
    description(input: LocalizationInput): String
    descriptions: [Translation!]!
    comment(input: LocalizationInput): String
    comments: [Translation!]!
    tags: [Tag!]!
    collectedBy: XtdRelCollectsConnection!
    assignedCollections: XtdRelAssignsCollectionsConnection!
    # assignedProperties: XtdRelAssignsPropertiesConnection!
}

interface XtdConcept implements XtdRoot, XtdObject {
    id: ID!
    recordType: CatalogRecordType!
    created: String!
    createdBy: String!
    lastModified: String!
    lastModifiedBy: String!
    versionId: String
    versionDate: String
    majorVersion: Int!
    minorVersion: Int!
    name(input: LocalizationInput): String
    names: [Translation!]!
    description(input: LocalizationInput): String
    descriptions: [Translation!]!
    comment(input: LocalizationInput): String
    comments: [Translation!]!
    tags: [Tag!]!
    collectedBy: XtdRelCollectsConnection!
    documentedBy: [XtdExternalDocument!]
    assignedCollections: XtdRelAssignsCollectionsConnection!
    # assignedProperties: XtdRelAssignsPropertiesConnection!
}

interface XtdCollection implements XtdRoot {
    id: ID!
    recordType: CatalogRecordType!
    created: String!
    createdBy: String!
    lastModified: String!
    lastModifiedBy: String!
    versionId: String
    versionDate: String
    name(input: LocalizationInput): String
    names: [Translation!]!
    description(input: LocalizationInput): String
    descriptions: [Translation!]!
    comment(input: LocalizationInput): String
    comments: [Translation!]!
    tags: [Tag!]!
    collectedBy: XtdRelCollectsConnection!
    collects: XtdRelCollectsConnection!
    documentedBy: [XtdExternalDocument!]
    assignedTo: XtdRelAssignsCollectionsConnection!
}

interface XtdRelationship {
    id: ID!
    recordType: CatalogRecordType!
    created: String!
    createdBy: String!
    lastModified: String!
    lastModifiedBy: String!
    versionId: String
    versionDate: String
    name(input: LocalizationInput): String
    names: [Translation!]!
    description(input: LocalizationInput): String
    descriptions: [Translation!]!
    comment(input: LocalizationInput): String
    comments: [Translation!]!
    tags: [Tag!]!
}

type XtdSubject implements XtdRoot, XtdConcept, XtdObject {
    id: ID!
    recordType: CatalogRecordType!
    created: String!
    createdBy: String!
    lastModified: String!
    lastModifiedBy: String!
    versionId: String
    versionDate: String
    majorVersion: Int!
    minorVersion: Int!
    name(input: LocalizationInput): String
    names: [Translation!]!
    description(input: LocalizationInput): String
    descriptions: [Translation!]!
    comment(input: LocalizationInput): String
    comments: [Translation!]!
    tags: [Tag!]!
    groupOfProperties: [XtdNest!]!
    properties: [XtdProperty!]
    collectedBy: XtdRelCollectsConnection!
    documentedBy: [XtdExternalDocument!]
    assignedCollections: XtdRelAssignsCollectionsConnection!
    # assignedProperties: XtdRelAssignsPropertiesConnection!
}


type XtdClassification implements XtdRoot, XtdConcept, XtdObject {
    id: ID!
    recordType: CatalogRecordType!
    created: String!
    createdBy: String!
    lastModified: String!
    lastModifiedBy: String!
    versionId: String
    versionDate: String
    majorVersion: Int!
    minorVersion: Int!
    name(input: LocalizationInput): String
    names: [Translation!]!
    description(input: LocalizationInput): String
    descriptions: [Translation!]!
    comment(input: LocalizationInput): String
    comments: [Translation!]!
    tags: [Tag!]!
    collectedBy: XtdRelCollectsConnection!
    documentedBy: [XtdExternalDocument!]
    assignedCollections: XtdRelAssignsCollectionsConnection!
    # assignedProperties: XtdRelAssignsPropertiesConnection!
}

type XtdMeasureWithUnit implements XtdRoot, XtdConcept, XtdObject {
    id: ID!
    recordType: CatalogRecordType!
    created: String!
    createdBy: String!
    lastModified: String!
    lastModifiedBy: String!
    versionId: String
    versionDate: String
    majorVersion: Int!
    minorVersion: Int!
    name(input: LocalizationInput): String
    names: [Translation!]!
    description(input: LocalizationInput): String
    descriptions: [Translation!]!
    comment(input: LocalizationInput): String
    comments: [Translation!]!
    tags: [Tag!]!
#    methodOfInterpretation: [Translation!]!
    assignedTo: XtdRelAssignsMeasuresConnection!
    collectedBy: XtdRelCollectsConnection!
    documentedBy: [XtdExternalDocument!]
    assignedCollections: XtdRelAssignsCollectionsConnection!
    # assignedProperties: XtdRelAssignsPropertiesConnection!
    assignedUnits: XtdRelAssignsUnitsConnection!
    assignedValues: XtdRelAssignsValuesConnection!
}

type XtdProperty implements XtdRoot, XtdConcept, XtdObject {
    id: ID!
    recordType: CatalogRecordType!
    created: String!
    createdBy: String!
    lastModified: String!
    lastModifiedBy: String!
    versionId: String
    versionDate: String
    majorVersion: Int!
    minorVersion: Int!
    name(input: LocalizationInput): String
    names: [Translation!]!
    description(input: LocalizationInput): String
    descriptions: [Translation!]!
    comment(input: LocalizationInput): String
    comments: [Translation!]!
    tags: [Tag!]!
    assignedMeasures: XtdRelAssignsMeasuresConnection!
    collectedBy: XtdRelCollectsConnection!
    documentedBy: [XtdExternalDocument!]
    assignedCollections: XtdRelAssignsCollectionsConnection!
    # assignedProperties: XtdRelAssignsPropertiesConnection!
    subjects: [XtdSubject!]
    # assignedTo: XtdRelAssignsPropertiesConnection!
}


type XtdUnit implements XtdRoot, XtdConcept, XtdObject {
    id: ID!
    recordType: CatalogRecordType!
    created: String!
    createdBy: String!
    lastModified: String!
    lastModifiedBy: String!
    versionId: String
    versionDate: String
    majorVersion: Int!
    minorVersion: Int!
    name(input: LocalizationInput): String
    names: [Translation!]!
    description(input: LocalizationInput): String
    descriptions: [Translation!]!
    comment(input: LocalizationInput): String
    comments: [Translation!]!
    tags: [Tag!]!
    assignedTo: XtdRelAssignsUnitsConnection!
    collectedBy: XtdRelCollectsConnection!
    documentedBy: [XtdExternalDocument!]
    assignedCollections: XtdRelAssignsCollectionsConnection!
    # assignedProperties: XtdRelAssignsPropertiesConnection!
}

type XtdValue implements XtdRoot, XtdObject {
    id: ID!
    recordType: CatalogRecordType!
    created: String!
    createdBy: String!
    lastModified: String!
    lastModifiedBy: String!
    versionId: String
    versionDate: String
    majorVersion: Int!
    minorVersion: Int!
    name(input: LocalizationInput): String
    names: [Translation!]!
    description(input: LocalizationInput): String
    descriptions: [Translation!]!
    comment(input: LocalizationInput): String
    comments: [Translation!]!
    tags: [Tag!]!
    toleranceType: ToleranceType
    lowerTolerance: String
    upperTolerance: String
    valueRole: ValueRole
    valueType: ValueType
    nominalValue: String
    collectedBy: XtdRelCollectsConnection!
    assignedCollections: XtdRelAssignsCollectionsConnection!
    # assignedProperties: XtdRelAssignsPropertiesConnection!
    assignedTo: XtdRelAssignsValuesConnection!
}

type XtdBag implements XtdRoot, XtdCollection {
    id: ID!
    recordType: CatalogRecordType!
    created: String!
    createdBy: String!
    lastModified: String!
    lastModifiedBy: String!
    versionId: String
    versionDate: String
    name(input: LocalizationInput): String
    names: [Translation!]!
    description(input: LocalizationInput): String
    descriptions: [Translation!]!
    comment(input: LocalizationInput): String
    comments: [Translation!]!
    tags: [Tag!]!
    collectedBy: XtdRelCollectsConnection!
    collects: XtdRelCollectsConnection!
    documentedBy: [XtdExternalDocument!]
    assignedTo: XtdRelAssignsCollectionsConnection!
}

type XtdNest implements XtdRoot, XtdCollection {
    id: ID!
    recordType: CatalogRecordType!
    created: String!
    createdBy: String!
    lastModified: String!
    lastModifiedBy: String!
    versionId: String
    versionDate: String
    name(input: LocalizationInput): String
    names: [Translation!]!
    description(input: LocalizationInput): String
    descriptions: [Translation!]!
    comment(input: LocalizationInput): String
    comments: [Translation!]!
    tags: [Tag!]!
    collectedBy: XtdRelCollectsConnection!
    collects: XtdRelCollectsConnection!
    documentedBy: [XtdExternalDocument!]
    assignedTo: XtdRelAssignsCollectionsConnection!
}

type XtdRelAssignsCollections implements XtdRelationship {
    id: ID!
    recordType: CatalogRecordType!
    created: String!
    createdBy: String!
    lastModified: String!
    lastModifiedBy: String!
    versionId: String
    versionDate: String
    name(input: LocalizationInput): String
    names: [Translation!]!
    description(input: LocalizationInput): String
    descriptions: [Translation!]!
    comment(input: LocalizationInput): String
    comments: [Translation!]!
    tags: [Tag!]!
    relatingObject: XtdObject!
    relatedCollections: [XtdCollection!]!
}

type XtdRelAssignsMeasures implements XtdRelationship {
    id: ID!
    recordType: CatalogRecordType!
    created: String!
    createdBy: String!
    lastModified: String!
    lastModifiedBy: String!
    versionId: String
    versionDate: String
    name(input: LocalizationInput): String
    names: [Translation!]!
    description(input: LocalizationInput): String
    descriptions: [Translation!]!
    comment(input: LocalizationInput): String
    comments: [Translation!]!
    tags: [Tag!]!
    relatingProperty: XtdProperty!
    relatedMeasures: [XtdMeasureWithUnit!]!
}

# type XtdRelAssignsProperties implements XtdRelationship {
#     id: ID!
#     recordType: CatalogRecordType!
#     created: String!
#     createdBy: String!
#     lastModified: String!
#     lastModifiedBy: String!
#     versionId: String
#     versionDate: String
#     name(input: LocalizationInput): String
#     names: [Translation!]!
#     description(input: LocalizationInput): String
#     descriptions: [Translation!]!
#     comment(input: LocalizationInput): String
#     comments: [Translation!]!
#     tags: [Tag!]!
#     relatingObject: XtdObject!
#     relatedProperties: [XtdProperty!]!
# }

type XtdRelAssignsUnits implements XtdRelationship {
    id: ID!
    recordType: CatalogRecordType!
    created: String!
    createdBy: String!
    lastModified: String!
    lastModifiedBy: String!
    versionId: String
    versionDate: String
    name(input: LocalizationInput): String
    names: [Translation!]!
    description(input: LocalizationInput): String
    descriptions: [Translation!]!
    comment(input: LocalizationInput): String
    comments: [Translation!]!
    tags: [Tag!]!
    relatingMeasure: XtdMeasureWithUnit!
    relatedUnits: [XtdUnit!]!
}

type XtdRelAssignsValues implements XtdRelationship {
    id: ID!
    recordType: CatalogRecordType!
    created: String!
    createdBy: String!
    lastModified: String!
    lastModifiedBy: String!
    versionId: String
    versionDate: String
    name(input: LocalizationInput): String
    names: [Translation!]!
    description(input: LocalizationInput): String
    descriptions: [Translation!]!
    comment(input: LocalizationInput): String
    comments: [Translation!]!
    tags: [Tag!]!
    relatingMeasure: XtdMeasureWithUnit!
    relatedValues: [XtdValue!]!
}

type XtdRelCollects implements XtdRelationship {
    id: ID!
    recordType: CatalogRecordType!
    created: String!
    createdBy: String!
    lastModified: String!
    lastModifiedBy: String!
    versionId: String
    versionDate: String
    name(input: LocalizationInput): String
    names: [Translation!]!
    description(input: LocalizationInput): String
    descriptions: [Translation!]!
    comment(input: LocalizationInput): String
    comments: [Translation!]!
    tags: [Tag!]!
    relatingCollection: XtdCollection!
    relatedThings: [XtdRoot!]!
}

# Connections

type PageInfo {
    pageNumber: Int!
    pageSize: Int!
    pageElements: Int!
    totalPages: Int!
    hasNext: Boolean!
    hasPrevious: Boolean!
    isFirst: Boolean!
    isLast: Boolean!
}

type XtdExternalDocumentConnection {
    nodes: [XtdExternalDocument!]!
    pageInfo: PageInfo!
    totalElements: Int!
}

type XtdRootConnection {
    nodes: [XtdRoot!]!
    pageInfo: PageInfo!
    totalElements: Int!
}

type XtdConceptConnection {
    nodes: [XtdConcept!]!
    pageInfo: PageInfo!
    totalElements: Int!
}

type XtdObjectConnection {
    nodes: [XtdObject!]!
    pageInfo: PageInfo!
    totalElements: Int!
}

type XtdClassificationConnection {
    nodes: [XtdClassification!]!
    pageInfo: PageInfo!
    totalElements: Int!
}

type XtdMeasureWithUnitConnection {
    nodes: [XtdMeasureWithUnit!]!
    pageInfo: PageInfo!
    totalElements: Int!
}

type XtdPropertyConnection {
    nodes: [XtdProperty!]!
    pageInfo: PageInfo!
    totalElements: Int!
}

type XtdSubjectConnection {
    nodes: [XtdSubject!]!
    pageInfo: PageInfo!
    totalElements: Int!
}

type XtdUnitConnection {
    nodes: [XtdUnit!]!
    pageInfo: PageInfo!
    totalElements: Int!
}

type XtdValueConnection {
    nodes: [XtdValue!]!
    pageInfo: PageInfo!
    totalElements: Int!
}

type XtdCollectionConnection {
    nodes: [XtdCollection!]!
    pageInfo: PageInfo!
    totalElements: Int!
}

type XtdBagConnection {
    nodes: [XtdBag!]!
    pageInfo: PageInfo!
    totalElements: Int!
}

type XtdNestConnection {
    nodes: [XtdNest!]!
    pageInfo: PageInfo!
    totalElements: Int!
}

type XtdRelationshipConnection {
    nodes: [XtdRelationship!]!
    pageInfo: PageInfo!
    totalElements: Int!
}

type XtdRelAssignsCollectionsConnection {
    nodes: [XtdRelAssignsCollections!]!
    pageInfo: PageInfo!
    totalElements: Int!
}

# type XtdRelAssignsPropertiesConnection {
#     nodes: [XtdRelAssignsProperties!]!
#     pageInfo: PageInfo!
#     totalElements: Int!
# }

type XtdRelAssignsMeasuresConnection {
    nodes: [XtdRelAssignsMeasures!]!
    pageInfo: PageInfo!
    totalElements: Int!
}

type XtdRelAssignsUnitsConnection {
    nodes: [XtdRelAssignsUnits!]!
    pageInfo: PageInfo!
    totalElements: Int!
}

type XtdRelAssignsValuesConnection {
    nodes: [XtdRelAssignsValues!]!
    pageInfo: PageInfo!
    totalElements: Int!
}

type XtdRelCollectsConnection {
    nodes: [XtdRelCollects!]!
    pageInfo: PageInfo!
    totalElements: Int!
}

type Query {
    languages(input: LanguageFilterInput): LanguageConnection

    statistics: CatalogStatistics!

    node(id: ID!): XtdRoot

    search(input: SearchInput, pageSize: Int, pageNumber: Int): SearchResultConnection!

    hierarchy(input: HierarchyFilterInput!): HierarchyPayload!

    findPropGroupWithoutProp: findPropGroupWithoutPropPayload!

    findPropWithoutSubjectOrPropGroup: findPropWithoutSubjectOrPropGroupPayload!

    findModelWithoutGroup: findModelWithoutGroupPayload!

    findGroupWithoutSubject: findGroupWithoutSubjectPayload!

    findSubjectWithoutProp: findSubjectWithoutPropPayload!

    findMeasureWithoutProp: findMeasureWithoutPropPayload!

    findUnitWithoutMeasure: findUnitWithoutMeasurePayload!

    findValueWithoutMeasure: findValueWithoutMeasurePayload!

    findMissingTags(input: findMissingTagsFilterInput!): findMissingTagsPayload!

    findMissingEnglishName(input: findMissingEnglishNameFilterInput!): findMissingEnglishNamePayload!

    findMultipleIDs(input: findMultipleIDsFilterInput!): findMultipleIDsPayload!

    findMissingDescription(input: findMissingDescriptionFilterInput!): findMissingDescriptionPayload!

    findMissingEnglishDescription(input: findMissingEnglishDescriptionFilterInput!): findMissingEnglishDescriptionPayload!

    findMultipleNames(input: findMultipleNamesFilterInput!): findMultipleNamesPayload!

    findMultipleNamesAcrossClasses(input: findMultipleNamesAcrossClassesFilterInput!): findMultipleNamesAcrossClassesPayload!

    findExportCatalogRecords: findExportCatalogRecordsPayload!

    findExportCatalogRecordsRelationships: findExportCatalogRecordsRelationshipsPayload!


    getTag(id: ID!): Tag!
    findTags(input: FilterInput): TagConnection!

    getExternalDocument(id: ID!): XtdExternalDocument
    findExternalDocuments(input: FilterInput): XtdExternalDocumentConnection!

    getClassification(id: ID!): XtdClassification
    findClassifications(input: FilterInput): XtdClassificationConnection!

    getMeasure(id: ID!): XtdMeasureWithUnit
    findMeasures(input: FilterInput): XtdMeasureWithUnitConnection!

    getProperty(id: ID!): XtdProperty
    findProperties(input: FilterInput): XtdPropertyConnection!

    getSubject(id: ID!): XtdSubject
    findSubjects(input: FilterInput): XtdSubjectConnection!

    getUnit(id: ID!): XtdUnit
    findUnits(input: FilterInput): XtdUnitConnection!

    getValue(id: ID!): XtdValue
    findValues(input: FilterInput): XtdValueConnection!

    getBag(id: ID!): XtdBag
    findBags(input: FilterInput): XtdBagConnection!

    getNest(id: ID!): XtdNest
    findNests(input: FilterInput): XtdNestConnection!

    getAssignsCollections(id: ID!): XtdRelAssignsCollections
    findAssignsCollections(input: FilterInput): XtdRelAssignsCollectionsConnection!

    # getDocuments(id: ID!): XtdRelDocuments
    # findDocuments(input: FilterInput): XtdRelDocumentsConnection!

    getCollects(id: ID!): XtdRelCollects
    findCollects(input: FilterInput): XtdRelCollectsConnection!

    # getAssignsProperties(id: ID!): XtdRelAssignsProperties
    # findAssignsProperties(input: FilterInput): XtdRelAssignsPropertiesConnection

    getAssignsUnits(id: ID!): XtdRelAssignsUnits
    findAssignsUnits(input: FilterInput): XtdRelAssignsUnitsConnection

    getAssignsValues(id: ID!): XtdRelAssignsValues
    findAssignsValues(input: FilterInput): XtdRelAssignsValuesConnection
}
